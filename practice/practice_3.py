# 1. Вручную создайте список с целыми числами, которые
# повторяются. Получите новый список, который содержит
# уникальные (без повтора) элементы исходного списка.


# my_list = [2, 4, 1, 2, 2, 3, 4, 1]
# list_2 = list(set(my_list))
# print(list_2)
# ----------------------------------

# my_list = [2, 4, 1, 2, 2, 3, 4, 1]
# new_list = []
# for i in my_list:
#     if i not in new_list:
#         new_list.append(i)
# print(new_list)

# 2.  Создайте вручную кортеж содержащий элементы разных типов.
# ✔ Получите из него словарь списков, где:
# ключ — тип элемента,
# значение — список элементов данного типа.

# my_tuple = ('str', 1, 4, 2, [2, 3, 4], 2.1, 'lol')
# dict = {}

# for item in my_tuple:
#     if type(item) not in dict:
#         dict[type(item)] = []
#     dict[type(item)].append(item)

# print(dict)

# ------------------------------------

# my_tuple = ('str', 1, 4, 2, [2, 3, 4], 2.1, 'lol')
# dict = {}

# for item in my_tuple:
#     dict.setdefault(type(item), [])
#     dict[type(item)].append(item)

# print(dict)

# 3. ✔ Создайте вручную список с повторяющимися элементами.
# ✔ Удалите из него все элементы, которые встречаются дважды.

# my_list = [1, 2, 3, 1, 2, 3]
# i = 0
# while i < len(my_list):
#     item = my_list[i]
#     if my_list.count(item) == 2:
#         my_list.remove(item)
#         my_list.remove(item)
# print(my_list)

# 4. Создайте вручную список с повторяющимися целыми числами.
# ✔ Сформируйте список с порядковыми номерами
# нечётных элементов исходного списка.
# ✔ Нумерация начинается с единицы

# import random

# lst = [random.randint(0, 10) for _ in range(10)]
# print(lst)
# new_lst = [i+1 for i in range(len(lst)) if lst[i] % 2]
# print(new_lst)

# 5. Пользователь вводит строку текста. Вывести каждое слово с новой строки.
# ✔ Строки нумеруются начиная с единицы.
# ✔ Слова выводятся отсортированными согласно кодировки Unicode.
# ✔ Текст выравнивается по правому краю так, чтобы у самого длинного
# слова был один пробел между ним и номером строки.

# str = 'Asds dzx asdadddd a'
# lst = str.split()
# len_max = len(max(lst, key=len))
# lst.sort()
# for i, j in enumerate(lst, 1):
#     print(f'{i}. {j:>{len_max}}')

# 6. Пользователь вводит строку текста.
# ✔ Подсчитайте сколько раз встречается
# каждая буква в строке без использования
# метода count и с ним.
# ✔ Результат сохраните в словаре, где ключ —
# символ, а значение — частота встречи
# символа в строке.
# ✔ Обратите внимание на порядок ключей.
# Объясните почему они совпадают
# или не совпадают в ваших решениях

# str = input("Текст: ")
# dict = {}

# for item in set(str):
#     dict[item] = dict.get(item, 0) + 1
# print(dict)
# ------------------------------------

# str = input("Текст: ")
# dict = {}

# for item in set(str):
#     dict[item] = str.count(item)
# print(dict)


# 7. ✔ Три друга взяли вещи в поход. Сформируйте
# словарь, где ключ — имя друга, а значение —
# кортеж вещей. Ответьте на вопросы:
# ✔ Какие вещи взяли все три друга
# ✔ Какие вещи уникальны, есть только у одного друга
# ✔ Какие вещи есть у всех друзей кроме одного
# и имя того, у кого данная вещь отсутствует
# ✔ Для решения используйте операции
# с множествами. Код должен расширяться
# на любое большее количество друзей

# import random
# items = ("нож", "топор", "фонарь", "палатка", "компас")
# friends = ('A', 'B', 'C')
# max_count_items = 3

# dict = {}
# for i in friends:
#     dict.setdefault(i, [])
#     for j in range(max_count_items):
#         dict[i].append(random.choice(items))
# print(dict)
        